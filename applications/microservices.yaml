### Nigel Douglas Test App to represent Capital One Architecture ###
apiVersion: v1
kind: Namespace
metadata:
  name: capital-one
  labels:
    twilio: allowed
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: storefront
  namespace: capital-one
---
### Creating Backend for capital-one Application ###
apiVersion:  apps/v1
kind: Deployment
metadata:
  name: backend
  namespace: capital-one
  labels:
    app: backend
spec:
  replicas: 1
  selector:
    matchLabels:
      app: backend
  template:
    metadata:
      labels:
        app: backend
        fw-zone: restricted
        owner: nigel
    spec:
      serviceAccount: storefront
      containers:
      - name: mock-logging
        image: quay.io/tigera/peira:v0.2.3
        args:
        - "probe"
        - "logging:80"
        ports:
        - containerPort: 9000
      - name: mock
        image: quay.io/tigera/peira:v0.2.3
        args:
        - "mock"
        - "--resourcePath"
        - "/mocks/backend-mock.yaml"
        ports:
        - containerPort: 8080
        volumeMounts:
        - name: mockconfig
          mountPath: /mocks
      volumes:
      - name: mockconfig
        configMap:
          name: backend
---
kind: Service
apiVersion: v1
metadata:
  name: backend
  namespace: capital-one
spec:
  selector:
    app: backend
  ports:
  - protocol: TCP
    port: 80
    targetPort: 8080
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: backend
  namespace: capital-one
data:
  backend-mock.yaml: |
    apiVersion: peira.tigera.io./v1alpha1
    kind: MockService
    metadata:
       namespace: capital-one
       name: backend
    spec:
      logLevel: debug
      enableProbe: true
      listenPort: 80
      actions:
      - kind: call
        value: "http://logging"
      - kind: reply
        value: "hello world"
---
####################################################
### Creating Frontend for capital-one Application ###
apiVersion:  apps/v1
kind: Deployment
metadata:
  name: frontend
  namespace: capital-one
  labels:
    app: frontend
spec:
  replicas: 1
  revisionHistoryLimit: 0
  selector:
    matchLabels:
      app: frontend
  template:
    metadata:
      labels:
        app: frontend
        fw-zone: dmz
        owner: nigel
    spec:
      serviceAccount: storefront
      containers:
      - name: mock-microservice1
        image: quay.io/tigera/peira:v0.2.3
        args:
        - "probe"
        - "microservice1:80"
        ports:
        - containerPort: 9000
      - name: mock-logging
        image: quay.io/tigera/peira:v0.2.3
        args:
        - "probe"
        - "--listenPort"
        - "9001"
        - "logging:80"
      - name: mock-microservice2
        image: quay.io/tigera/peira:v0.2.3
        args:
        - "probe"
        - "--listenPort"
        - "9002"
        - "microservice2:80"
        ports:
        - containerPort: 9002
      - name: mock
        image: quay.io/tigera/peira:v0.2.3
        args:
        - "mock"
        - "--resourcePath"
        - "/mocks/frontend-mock.yaml"
        ports:
        - containerPort: 8080
        volumeMounts:
        - name: mockconfig
          mountPath: /mocks
      volumes:
      - name: mockconfig
        configMap:
          name: frontend
---
kind: Service
apiVersion: v1
metadata:
  name: frontend
  namespace: capital-one
spec:
  selector:
    app: frontend
  ports:
  - protocol: TCP
    port: 80
    targetPort: 8080
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: frontend
  namespace: capital-one
data:
  frontend-mock.yaml: |
    apiVersion: peira.tigera.io./v1alpha1
    kind: MockService
    metadata:
       namespace: capital-one
       name: frontend
    spec:
      logLevel: debug
      enableProbe: false
      listenPort: 80
      actions:
      - kind: call
        value: "http://logging"
      - kind: call
        value: "http://microservice1"
      - kind: call
        value: "http://microservice2"
      - kind: reply
        value: "hello world"
---
####################################################
### Creating Logging for capital-one Application ####
apiVersion:  apps/v1
kind: Deployment
metadata:
  name: logging
  namespace: capital-one
  labels:
    app: logging
spec:
  replicas: 1
  selector:
    matchLabels:
      app: logging
  template:
    metadata:
      labels:
        app: logging
        owner: nigel
    spec:
      serviceAccount: storefront
      containers:
      - name: mock
        image: quay.io/tigera/peira:v0.2.3
        args:
        - "mock"
        - "--resourcePath"
        - "/mocks/logging-mock.yaml"
        ports:
        - containerPort: 8080
        volumeMounts:
        - name: mockconfig
          mountPath: /mocks
      volumes:
      - name: mockconfig
        configMap:
          name: logging
---
kind: Service
apiVersion: v1
metadata:
  name: logging
  namespace: capital-one
spec:
  selector:
    app: logging
  ports:
  - protocol: TCP
    port: 80
    targetPort: 8080
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: logging
  namespace: capital-one
data:
  logging-mock.yaml: |
    apiVersion: peira.tigera.io./v1alpha1
    kind: MockService
    metadata:
       namespace: capital-one
       name: logging
    spec:
      logLevel: debug
      enableProbe: true
      listenPort: 80
      actions:
      - kind: reply
        value: "hello world"
---
#########################################################
### Creating Microservice1 for capital-one Application ###
apiVersion:  apps/v1
kind: Deployment
metadata:
  name: microservice1
  namespace: capital-one
  labels:
    app: microservice1
spec:
  replicas: 1
  revisionHistoryLimit: 0
  selector:
    matchLabels:
      app: microservice1
  template:
    metadata:
      labels:
        app: microservice1
        fw-zone: trusted
        owner: nigel
    spec:
      serviceAccount: storefront
      containers:
      - name: mock-microservice2
        image: quay.io/tigera/peira:v0.2.3
        args:
        - "probe"
        - "microservice2:80"
        ports:
        - containerPort: 9000
      - name: mock-backend
        image: quay.io/tigera/peira:v0.2.3
        args:
        - "probe"
        - "--listenPort"
        - "9001"
        - "backend:80"
        ports:
        - containerPort: 9001
      - name: mock-logging
        image: quay.io/tigera/peira:v0.2.3
        args:
        - "probe"
        - "--listenPort"
        - "9002"
        - "backend:80"
        ports:
        - containerPort: 9002
      - name: mock
        image: quay.io/tigera/peira:v0.2.3
        args:
        - "mock"
        - "--resourcePath"
        - "/mocks/microservice1-mock.yaml"
        ports:
        - containerPort: 8080
        volumeMounts:
        - name: mockconfig
          mountPath: /mocks
      volumes:
      - name: mockconfig
        configMap:
          name: microservice1
---
kind: Service
apiVersion: v1
metadata:
  name: microservice1
  namespace: capital-one
spec:
  selector:
    app: microservice1
  ports:
  - protocol: TCP
    port: 80
    targetPort: 8080
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: microservice1
  namespace: capital-one
data:
  microservice1-mock.yaml: |
    apiVersion: peira.tigera.io./v1alpha1
    kind: MockService
    metadata:
       namespace: capital-one
       name: microservice1
    spec:
      logLevel: debug
      enableProbe: true
      listenPort: 80
      actions:
      - kind: call
        value: "http://logging"
      - kind: call
        value: "http://microservice2"
      - kind: call
        value: "http://backend"
      - kind: reply
        value: "hello world"
---
#########################################################
### Creating Microservice2 for capital-one Application ###
apiVersion:  apps/v1
kind: Deployment
metadata:
  name: microservice2
  namespace: capital-one
  labels:
    app: microservice2
spec:
  replicas: 1
  selector:
    matchLabels:
      app: microservice2
  template:
    metadata:
      labels:
        app: microservice2
        fw-zone: trusted
        owner: nigel
    spec:
      serviceAccount: storefront
      containers:
      - name: mock-twilio
        image: busybox
        command: ["/bin/sh"]
        args: ["-c", "while true; do wget http://api.twilio.com; sleep 15; done"]
      - name: mock-microservice1
        image: quay.io/tigera/peira:v0.2.3
        args:
        - "probe"
        - "microservice1:80"
        ports:
        - containerPort: 9000
      - name: mock-backend
        image: quay.io/tigera/peira:v0.2.3
        args:
        - "probe"
        - "--listenPort"
        - "9001"
        - "backend:80"
        ports:
        - containerPort: 9001
      - name: mock-logging
        image: quay.io/tigera/peira:v0.2.3
        args:
        - "probe"
        - "--listenPort"
        - "9002"
        - "backend:80"
        ports:
        - containerPort: 9002
      - name: mock
        image: quay.io/tigera/peira:v0.2.3
        args:
        - "mock"
        - "--resourcePath"
        - "/mocks/microservice2-mock.yaml"
        ports:
        - containerPort: 8080
        volumeMounts:
        - name: mockconfig
          mountPath: /mocks
      volumes:
      - name: mockconfig
        configMap:
          name: microservice2
---
kind: Service
apiVersion: v1
metadata:
  name: microservice2
  namespace: capital-one
spec:
  selector:
    app: microservice2
  ports:
  - protocol: TCP
    port: 80
    targetPort: 8080
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: microservice2
  namespace: capital-one
data:
  microservice2-mock.yaml: |
    apiVersion: peira.tigera.io./v1alpha1
    kind: MockService
    metadata:
       namespace: capital-one
       name: microservice2
    spec:
      logLevel: debug
      enableProbe: true
      listenPort: 80
      actions:
      - kind: call
        value: "http://logging"
      - kind: call
        value: "http://microservice1"
      - kind: call
        value: "http://backend"
      - kind: reply
        value: "hello world"
---
###################################################
##### Creating ACME Namespace and Microservice ####
apiVersion: v1
kind: Namespace
metadata:
  name: acme
---
apiVersion:  apps/v1
kind: Deployment
metadata:
  name: acme-microservice1
  namespace: acme
  labels:
    app: acme-microservice1
spec:
  replicas: 1
  selector:
    matchLabels:
      app: acme-microservice1
  template:
    metadata:
      labels:
        app: acme-microservice1
        owner: nigel
    spec:
      containers:
      - name: mock-acme-microservice2
        image: quay.io/tigera/peira:v0.2.3
        args:
        - "probe"
        - "--listenPort"
        - "9002"
        - "acme-microservice2:80"
        ports:
        - containerPort: 9002
      - name: mock
        image: quay.io/tigera/peira:v0.2.3
        args:
        - "mock"
        - "--resourcePath"
        - "/mocks/acme-microservice1-mock.yaml"
        ports:
        - containerPort: 8080
        volumeMounts:
        - name: mockconfig
          mountPath: /mocks
      volumes:
      - name: mockconfig
        configMap:
          name: acme-microservice1
---
apiVersion:  apps/v1
kind: Deployment
metadata:
  name: acme-microservice2
  namespace: acme
  labels:
    app: acme-microservice2
    owner: nigel
spec:
  replicas: 1
  selector:
    matchLabels:
      app: acme-microservice2
  template:
    metadata:
      labels:
        app: acme-microservice2
    spec:
      containers:
      - name: mock-acme-microservice1
        image: quay.io/tigera/peira:v0.2.3
        args:
        - "probe"
        - "--listenPort"
        - "9002"
        - "acme-microservice1:80"
        ports:
        - containerPort: 9002
      - name: mock
        image: quay.io/tigera/peira:v0.2.3
        args:
        - "mock"
        - "--resourcePath"
        - "/mocks/acme-microservice2-mock.yaml"
        ports:
        - containerPort: 8080
        volumeMounts:
        - name: mockconfig
          mountPath: /mocks
      volumes:
      - name: mockconfig
        configMap:
          name: acme-microservice2
---
kind: Service
apiVersion: v1
metadata:
  name: acme-microservice1
  namespace: acme
spec:
  selector:
    app: acme-microservice1
  ports:
  - protocol: TCP
    port: 80
    targetPort: 8080
---
kind: Service
apiVersion: v1
metadata:
  name: acme-microservice2
  namespace: acme
spec:
  selector:
    app: acme-microservice2
  ports:
  - protocol: TCP
    port: 80
    targetPort: 8080
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: acme-microservice1
  namespace: acme
data:
  acme-microservice1-mock.yaml: |
    apiVersion: peira.tigera.io./v1alpha1
    kind: MockService
    metadata:
       namespace: acme
       name: acme-microservice1
    spec:
      logLevel: debug
      enableProbe: false
      listenPort: 80
      actions:
      - kind: call
        value: "http://acme-microservice2"
      - kind: reply
        value: "hello world"
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: acme-microservice2
  namespace: acme
data:
  acme-microservice2-mock.yaml: |
    apiVersion: peira.tigera.io./v1alpha1
    kind: MockService
    metadata:
       namespace: acme
       name: acme-microservice2
    spec:
      logLevel: debug
      enableProbe: false
      listenPort: 80
      actions:
      - kind: call
        value: "http://acme-microservice1"
      - kind: reply
        value: "hello world"
####################################################
